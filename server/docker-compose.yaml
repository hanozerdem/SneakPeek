version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  chatbot-service:
    container_name: chatbot-service
    build:
      context: ./chatbot-service
      dockerfile: Dockerfile
    ports:
      - "50055:50055"
    networks:
      - mynetwork
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}


  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - mynetwork

  mongo:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: users
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    command: ["--tlsMode", "disabled"]
    networks:
      - mynetwork

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    volumes:
      - ./proto:/usr/src/proto
    ports:
      - "9000:9000"
    depends_on:
      - user-service
      - product-service
      - order-service
      - cart-service
      - kafka
    networks:
      - mynetwork
    environment:
      PORT: ${PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}

  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    volumes:
      - ./proto:/usr/src/proto
    ports:
      - "50051:50051"
    depends_on:
      - mongo
    networks:
      - mynetwork
    environment:
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}

  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "10000:10000"
    depends_on:
      - kafka
    restart: always
    networks:
      - mynetwork
    environment:
      KAFKA_BROKER: kafka:9092

  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    volumes:
      - ./proto:/usr/src/proto
    ports:
      - "50053:50053"
    depends_on:
      - payment-service
      - notification-service
      - kafka
      - mongo
    restart: always
    networks:
      - mynetwork
    environment:
      MONGO_URI: ${MONGO_URI}
      KAFKA_BROKER: kafka:9092

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      
    ports:
      - "6000:6000"
    depends_on:
      - kafka
    restart: always
    networks:
      - mynetwork
    environment:
      MONGO_URI: ${MONGO_URI}
      KAFKA_BROKER: kafka:9092
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
    volumes:
      - ./proto:/usr/src/proto

  cart-service:
    container_name: cart-service
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    volumes:
      - ./proto:/usr/src/proto
    ports:
      - "50054:50054"
    networks:
      - mynetwork
    environment:
      DB_HOST: switchyard.proxy.rlwy.net
      DB_PORT: 55806
      DB_USER: root
      DB_PASS: XIzKmiWvORAPcRjvTMKdoJCxhSURLTxZ
      DB_NAME: railway

  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    volumes:
      - ./proto:/usr/src/proto
      - .:/app
    ports:
      - "50052:50052"
    networks:
      - mynetwork
    environment:
      DB_HOST: switchyard.proxy.rlwy.net
      DB_PORT: 55806
      DB_USER: root
      DB_PASS: XIzKmiWvORAPcRjvTMKdoJCxhSURLTxZ
      DB_NAME: railway

networks:
  mynetwork:
    driver: bridge

volumes:
  mongo_data: 
  mysql_data:
